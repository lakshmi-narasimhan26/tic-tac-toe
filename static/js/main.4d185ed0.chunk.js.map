{"version":3,"sources":["components/Square.js","components/Plot.js","components/Game.js","services/gameHelpers.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","style","backgroundColor","border","padding","fontSize","textAlign","Plot","squares","display","gridTemplateColumns","width","height","map","square","i","Game","useState","Array","fill","plot","setPlot","isX","setIsX","isGameDone","isGameOver","forEach","winSlot","pattern","checkWinner","gameTiedText","includes","isGameTie","className","highlight","margin","borderBottom","highlightDisabled","color","flexDirection","alignItems","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAmBeA,MAjBf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAUvB,OACE,mCACE,qBAAKC,MAVK,CACZC,gBAAiB,UACjBC,OAAQ,+BACRC,QAAS,OACTC,SAAU,OACVC,UAAW,UAKUN,QAASA,EAA5B,SAAsCD,OCO7BQ,MAlBf,YAAqC,IAArBC,EAAoB,EAApBA,QAASR,EAAW,EAAXA,QASvB,OACE,qBAAKC,MARO,CACZQ,QAAS,OACTC,oBAAqB,iBACrBC,MAAO,QACPC,OAAQ,SAIR,SACGJ,EAAQK,KAAI,SAACC,EAAQC,GAAT,OACX,cAAC,EAAD,CAAgBhB,MAAOe,EAAQd,QAAS,kBAAMA,EAAQe,KAAzCA,SCmDNC,MA9Df,WAAiB,IAAD,EAEUC,mBAASC,MAAM,GAAGC,KAAK,OAFjC,mBAEPC,EAFO,KAEDC,EAFC,OAGQJ,oBAAS,GAHjB,mBAGPK,EAHO,KAGFC,EAHE,KAIRC,ECRD,SAAqBJ,GAC1B,IAUIK,GAAa,EAQjB,MAlBqB,CACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGIC,SAAQ,SAACC,GACpB,IAAIC,EAAU,GAAKR,EAAKO,EAAQ,IAAMP,EAAKO,EAAQ,IAAMP,EAAKO,EAAQ,IACtE,GAAgB,QAAZC,GAAiC,QAAZA,EAEvB,OADAH,GAAa,GACN,KAGJA,EDXYI,CAAYT,GACzBU,ECaD,SAAmBV,GACxB,OAAOA,EAAKW,SAAS,MDdCC,CAAUZ,IAAUI,EAAsD,GAAzC,qBAAKS,UAAU,QAAf,uBA4BjDC,EAAY,CAChB7B,SAAU,OACV8B,OAAQ,OACR/B,QAAS,MACTgC,aAAc,qBAGVC,EAAoB,CACxBhC,SAAU,OACV8B,OAAQ,OACR/B,QAAS,MACTkC,MAAO,WAGT,OACE,sBAAKrC,MA5BW,CAChBQ,QAAS,OACT8B,cAAe,SACfC,WAAY,UAyBZ,UACE,qBAAKP,UAAU,QAAf,0BACA,sBAAKhC,MAxBO,CACdQ,QAAS,OACT8B,cAAe,MACfE,eAAgB,eAChB9B,MAAO,SAoBL,UACE,qBAAKV,MAAOqB,IAAQE,EAAaU,EAAYG,EAA7C,0BACA,qBAAKpC,MAAQqB,GAAQE,EAAyBa,EAAZH,EAAlC,6BAEF,cAAC,EAAD,CAAM1B,QAASY,EAAMpB,QA/CV,SAACe,GACVK,EAAKL,IAAMS,IAEfJ,EAAKL,GAAKO,EAAM,IAAM,IACtBD,EAAQD,GACRG,GAAQD,OA2CLQ,GACCN,IAAgBF,EAAkD,qBAAKW,UAAU,QAAf,0BAA5C,qBAAKA,UAAU,QAAf,2BACxB,wBAAQA,UAAU,SAASjC,QA1CjB,WACZqB,EAAQH,MAAM,GAAGC,KAAK,OACtBI,GAAO,IAwCL,gCEjDSmB,MATf,WAEE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,OCKSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d185ed0.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Square({ value, onClick }) {\n\n  const style = {\n    backgroundColor: '#f8f8f8',\n    border: '1px solid rgba(0, 0, 0, 0.8)',\n    padding: '20px',\n    fontSize: '30px',\n    textAlign: 'center',\n  };\n\n  return (\n    <>\n      <div style={style} onClick={onClick}>{value}</div>\n    </>\n  )\n}\n\nexport default Square\n","import React from 'react'\nimport Square from './Square';\n\nfunction Plot({ squares, onClick }) {\n\n  const style = {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto auto',\n    width: '400px',\n    height: '400px'\n  }\n\n  return (\n    <div style={style}>\n      {squares.map((square, i) => (\n        <Square key={i} value={square} onClick={() => onClick(i)}/>\n      ))}\n    </div>\n  )\n}\n\nexport default Plot\n","import React, {useState} from 'react'\nimport Plot from './Plot';\nimport {checkWinner, isGameTie} from '../services/gameHelpers';\n\nfunction Game() {\n\n  const [plot, setPlot] = useState(Array(9).fill(null));\n  const [isX, setIsX] = useState(true);\n  const isGameDone = checkWinner(plot);\n  const gameTiedText = !isGameTie(plot) && !isGameDone ? <div className=\"title\">Game Tied</div> : \"\";\n\n  const action = (i) => {\n    if (plot[i] || isGameDone) return;\n\n    plot[i] = isX ? \"X\" : \"O\";\n    setPlot(plot);\n    setIsX(!isX);\n  }\n\n  const reset = () => {\n    setPlot(Array(9).fill(null));\n    setIsX(true);\n  }\n\n  const container = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }\n\n  const headers = {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    width: '400px'\n  };\n\n  const highlight = {\n    fontSize: '24px',\n    margin: '12px',\n    padding: '2px',\n    borderBottom: '4px solid #ff5959',\n  };\n\n  const highlightDisabled = {\n    fontSize: '24px',\n    margin: '12px',\n    padding: '2px',\n    color: '#787e93'\n  }\n  \n  return (\n    <div style={container}>\n      <div className=\"title\">Tic Tac Toe!</div>\n      <div style={headers}>\n        <div style={isX && !isGameDone ? highlight : highlightDisabled}>Player 1 (X)</div>\n        <div style={!isX && !isGameDone ? highlight : highlightDisabled}>Player 2 (O)</div>\n      </div>\n      <Plot squares={plot} onClick={action} />\n      {gameTiedText}\n      {!isGameDone || (!isX ? <div className=\"title\">Player 1 Won</div> : <div className=\"title\">Player 2 Won</div>)}\n      <button className=\"button\" onClick={reset}>Start New Game</button>\n    </div>\n  )\n}\n\nexport default Game\n","export function checkWinner(plot) {\n  const gameWinSlots = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  let isGameOver = false;\n  gameWinSlots.forEach((winSlot) => {\n    let pattern = \"\" + plot[winSlot[0]] + plot[winSlot[1]] + plot[winSlot[2]];\n    if (pattern === \"XXX\" || pattern === \"OOO\") {\n      isGameOver = true;\n      return false;\n    }\n  });\n  return isGameOver;\n}\n\nexport function isGameTie(plot) {\n  return plot.includes(null);\n}","import './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}